# TSAF Helm Chart Values

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Application configuration
app:
  name: tsaf
  version: "1.0.0"

# Image configuration
image:
  registry: docker.io
  repository: tsaf/tsaf
  tag: "1.0.0"
  pullPolicy: IfNotPresent
  pullSecrets: []

# Deployment configuration
deployment:
  replicaCount: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0

  # Resource limits
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 200m
      memory: 512Mi

  # Probes
  livenessProbe:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1
    path: /health

  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    path: /health

  startupProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
    successThreshold: 1
    path: /health

# Service configuration
service:
  type: LoadBalancer
  port: 80
  targetPort: 8000
  annotations: {}

  # Internal service
  internal:
    enabled: true
    type: ClusterIP
    port: 8000

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: tsaf.example.com
      paths:
        - path: /
          pathType: Prefix
    - host: api.tsaf.example.com
      paths:
        - path: /api
          pathType: Prefix
        - path: /docs
          pathType: Prefix
        - path: /health
          pathType: Prefix
  tls:
    - secretName: tsaf-tls
      hosts:
        - tsaf.example.com
        - api.tsaf.example.com

# Autoscaling configuration
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 20
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 60

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Security Context
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false
  capabilities:
    drop:
      - ALL

# Pod Security Context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""
  automountServiceAccountToken: true

# RBAC
rbac:
  create: true
  rules:
    - apiGroups: [""]
      resources: ["configmaps", "secrets"]
      verbs: ["get", "list", "watch"]
    - apiGroups: [""]
      resources: ["pods"]
      verbs: ["get", "list", "watch"]

# Configuration
config:
  # Environment
  environment: production
  debug: false
  logLevel: INFO

  # Server
  server:
    host: "0.0.0.0"
    port: 8000
    workers: 4
    reload: false
    accessLog: true

  # Security
  security:
    enableCors: true
    rateLimit: 1000
    rateWindow: 3600
    maxContentLength: 10485760
    corsOrigins: ["*"]
    corsHeaders: ["*"]

  # Analyzer
  analyzer:
    enableStaticAnalysis: true
    enableDynamicAnalysis: true
    enableMlDetection: true
    enableBehavioralAnalysis: true
    riskThreshold: 0.5
    confidenceThreshold: 0.7
    maxConcurrentAnalyses: 10

  # Detector
  detector:
    enablePatternDetection: true
    enableSignatureDetection: true
    enableAnomalyDetection: true
    detectionSensitivity: 0.7

  # Translator
  translator:
    enableSemanticValidation: true
    enableSecurityValidation: true
    enableFormalVerification: true

  # Verifier
  verifier:
    enableProverif: true
    enableTamarin: true
    enableTlaplus: true
    verificationTimeout: 300
    parallelVerification: true

  # Monitoring
  monitoring:
    enableMetrics: true
    enableTracing: true
    metricsInterval: 60

# Secrets
secrets:
  # API Keys
  apiKeys:
    admin: "change-this-admin-key"
    client: "change-this-client-key"

  # JWT Secret
  jwtSecret: "change-this-jwt-secret"

  # Database credentials
  database:
    password: "tsaf_password"

  # Redis password
  redis:
    password: "redis_password"

# External secrets (if using external secret management)
externalSecrets:
  enabled: false
  secretStore:
    provider: aws
    region: us-west-2

# Persistence
persistence:
  data:
    enabled: true
    storageClass: ""
    accessMode: ReadWriteMany
    size: 5Gi
    annotations: {}

  logs:
    enabled: true
    storageClass: ""
    accessMode: ReadWriteMany
    size: 2Gi
    annotations: {}

  models:
    enabled: true
    storageClass: ""
    accessMode: ReadWriteMany
    size: 10Gi
    annotations: {}

# PostgreSQL configuration (Bitnami chart)
postgresql:
  enabled: true
  auth:
    postgresPassword: "postgres_admin_password"
    username: "tsaf"
    password: "tsaf_password"
    database: "tsaf"
  primary:
    persistence:
      enabled: true
      size: 10Gi
    resources:
      requests:
        memory: 256Mi
        cpu: 100m
      limits:
        memory: 1Gi
        cpu: 500m

# Redis configuration (Bitnami chart)
redis:
  enabled: true
  auth:
    enabled: true
    password: "redis_password"
  master:
    persistence:
      enabled: true
      size: 1Gi
    resources:
      requests:
        memory: 128Mi
        cpu: 50m
      limits:
        memory: 512Mi
        cpu: 250m

# Network Policies
networkPolicy:
  enabled: true
  ingress:
    from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx
      - namespaceSelector:
          matchLabels:
            name: monitoring
  egress:
    to:
      - podSelector:
          matchLabels:
            app.kubernetes.io/name: postgresql
      - podSelector:
          matchLabels:
            app.kubernetes.io/name: redis

# Pod Annotations
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8000"
  prometheus.io/path: "/metrics"

# Pod Labels
podLabels: {}

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - tsaf
          topologyKey: kubernetes.io/hostname

# Init containers
initContainers:
  waitForPostgres:
    enabled: true
    image: busybox:1.35
  waitForRedis:
    enabled: true
    image: busybox:1.35

# Extra containers
extraContainers: []

# Extra volumes
extraVolumes: []

# Extra volume mounts
extraVolumeMounts: []

# Extra environment variables
extraEnvVars: []

# Environment variables from ConfigMaps
extraEnvVarsCM: []

# Environment variables from Secrets
extraEnvVarsSecret: []

# Tests
tests:
  enabled: true
  image:
    repository: curlimages/curl
    tag: latest
    pullPolicy: IfNotPresent