apiVersion: apps/v1
kind: Deployment
metadata:
  name: tsaf-app
  namespace: tsaf
  labels:
    app: tsaf
    component: application
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: tsaf
      component: application
  template:
    metadata:
      labels:
        app: tsaf
        component: application
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: tsaf-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
      - name: wait-for-postgres
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for PostgreSQL to be ready..."
          until nc -z postgres 5432; do
            echo "PostgreSQL not ready, waiting..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
      - name: wait-for-redis
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for Redis to be ready..."
          until nc -z redis 6379; do
            echo "Redis not ready, waiting..."
            sleep 2
          done
          echo "Redis is ready!"
      containers:
      - name: tsaf
        image: tsaf:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        # Database configuration
        - name: DATABASE__DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: tsaf-secrets
              key: database-url

        # Redis configuration
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: tsaf-secrets
              key: redis-password
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis:6379/0"

        # JWT Secret
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: tsaf-secrets
              key: jwt-secret

        # API Keys
        - name: SECURITY__API_KEYS
          value: |
            {
              "admin": "$(API_KEY_ADMIN)",
              "client": "$(API_KEY_CLIENT)"
            }
        - name: API_KEY_ADMIN
          valueFrom:
            secretKeyRef:
              name: tsaf-secrets
              key: api-key-admin
        - name: API_KEY_CLIENT
          valueFrom:
            secretKeyRef:
              name: tsaf-secrets
              key: api-key-client

        envFrom:
        - configMapRef:
            name: tsaf-config

        volumeMounts:
        - name: tsaf-data
          mountPath: /app/data
        - name: tsaf-logs
          mountPath: /app/logs
        - name: tsaf-models
          mountPath: /app/models

        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1

        readinessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1

        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1

        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "2Gi"
            cpu: "1000m"

        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL

      volumes:
      - name: tsaf-data
        persistentVolumeClaim:
          claimName: tsaf-data-pvc
      - name: tsaf-logs
        persistentVolumeClaim:
          claimName: tsaf-logs-pvc
      - name: tsaf-models
        persistentVolumeClaim:
          claimName: tsaf-models-pvc

      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - tsaf
                - key: component
                  operator: In
                  values:
                  - application
              topologyKey: kubernetes.io/hostname

      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: tsaf-data-pvc
  namespace: tsaf
  labels:
    app: tsaf
    component: storage
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: tsaf-logs-pvc
  namespace: tsaf
  labels:
    app: tsaf
    component: storage
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 2Gi
  storageClassName: standard

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: tsaf-models-pvc
  namespace: tsaf
  labels:
    app: tsaf
    component: storage
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard